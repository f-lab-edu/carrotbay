name: CI/CD Pipeline
on:
  push:
    branches: [ "main", "feature/ci", "feature/cd" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build project (compile only)
        run: ./gradlew build -x test

      - name: Upload JAR as artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/*.jar

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run tests
        run: ./gradlew test

  docker:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Download built JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: build/libs/

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/carrotbay:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/carrotbay:latest

  deploy:
    name: Deploy on EC2 via SSH
    runs-on: ubuntu-latest
    needs: docker

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          source: "docker-compose.yml"
          target: "/home/ubuntu/"
          overwrite: true

      - name: Deploy via SSH with full Docker cleanup and .env setup
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            echo "RDS_HOST=${{ secrets.RDS_HOST }}" > /home/ubuntu/.env
            echo "RDS_DB_NAME=${{ secrets.RDS_DB_NAME }}" >> /home/ubuntu/.env
            echo "RDS_USERNAME=${{ secrets.RDS_USERNAME }}" >> /home/ubuntu/.env
            echo "RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}" >> /home/ubuntu/.env

            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

            docker-compose -f /home/ubuntu/docker-compose.yml down
            docker image prune -af
            docker-compose -f /home/ubuntu/docker-compose.yml pull
            docker-compose -f /home/ubuntu/docker-compose.yml up -d --force-recreate

