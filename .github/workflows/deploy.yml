name: CD Pipeline
on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  deploy:
    name: Deploy on EC2 via SSH
    runs-on: ubuntu-latest
    env:
      RDS_HOST: ${{ secrets.RDS_HOST }}
      RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
      RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
      RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      SPRING_PROFILES_ACTIVE: "prod"

    steps:
      - name: Print workflow_run info
        run: |
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Head branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Workflow: ${{ github.event.workflow_run.name }}"

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download image tag artifact from CI Pipeline
        uses: actions/download-artifact@v4
        with:
          name: image-tag
          path: .
          run-id: ${{ github.event.workflow_run.id }}

      - name: Read image tag
        id: read-tag
        run: |
          IMAGE_TAG=$(cat tag.txt)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "::set-output name=image_tag::$IMAGE_TAG"

      - name: Set spring profile based on branch
        run: |
          if [ "${GITHUB_REF_NAME}" = "main" ]; then
            echo "SPRING_PROFILES_ACTIVE=prod" >> .env
          else
            echo "SPRING_PROFILES_ACTIVE=dev" >> .env
          fi

      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          source: "docker-compose.yml"
          target: "/home/ubuntu/"
          overwrite: true

      - name: Deploy via SSH with full Docker cleanup and .env setup
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            export RDS_HOST=$RDS_HOST
            export RDS_DB_NAME=$RDS_DB_NAME
            export RDS_USERNAME=$RDS_USERNAME
            export RDS_PASSWORD=$RDS_PASSWORD
            
            echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin
            
            docker-compose -f /home/ubuntu/docker-compose.yml down
            docker image prune -af
            
            docker pull $DOCKER_USERNAME/carrotbay:$IMAGE_TAG
            docker tag $DOCKER_USERNAME/carrotbay:$IMAGE_TAG $DOCKER_USERNAME/carrotbay:latest
            
            docker-compose -f /home/ubuntu/docker-compose.yml up -d --force-recreate
